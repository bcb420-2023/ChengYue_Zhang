#
# shortened_filenames <- unlist(lapply(counts_files,
#               FUN = function(x){x <- unlist(strsplit(x,";")) ;
#               x <- x[grep(x,pattern= "count|cnt",ignore.case = TRUE)];
#                 tail(unlist(strsplit(x,"/")),n=1)}))
# shortened_filenames
# num_series <- dbGetQuery(con,
#                          paste("select * from gsm where series_id in ('",
#                                paste(series_of_interest,collapse="','"),
#                                "')", collapse = ""))
# gse.count <- as.data.frame(table(num_series$series_id))
# series_of_interest_with_counts <- gse.count[which(gse.count$Freq>6),1]
# M <- gse.count[which(gse.count$Freq>6),]
# M[order(M[, 2], decreasing = TRUE),]
# sfiles = getGEOSuppFiles('GSE162515')
# fnames = rownames(sfiles) # There are four supplement files
# b2 = read.delim(fnames[1],header=TRUE)
# head(b2)
gse <- getGEO("GSE162515",GSEMatrix=FALSE)
kable(data.frame(head(Meta(gse))), format = "html")
current_gpl <- names(GPLList(gse))[1]
current_gpl_info <- Meta(getGEO(current_gpl))
current_gpl_info$title
# [1] "Illumina NovaSeq 6000 (Homo sapiens)"
current_gpl_info$last_update_date
# [1] "Nov 05 2018"
current_gpl_info$organism
# [1] "Homo sapiens"
# sfiles = getGEOSuppFiles('GSE162515')
# fnames = rownames(sfiles)
# fnames
# myexp = read.delim(fnames[4],header=TRUE,
#                 check.names = FALSE)
# myexp
# expInfos <- myexp[, seq(88, 92)]
# expInfos
#
# newexp <- cbind(expInfos, myexp[, seq(-88, -92)])
# View(newexp)
# write.csv(newexp, "exp.csv")
myexp <- read.csv("exp.csv", header = TRUE)[, -1]
kable(myexp[1:15,1:15], format = "html")
dim(myexp)
summarized_gene_counts <- sort(table(myexp$Gene),
decreasing = TRUE)
kable(summarized_gene_counts[which(summarized_gene_counts>1)[1:10]], format = 'html')
colnames(myexp)
gseFile <- getGEO('GSE162515',GSEMatrix=TRUE)
gseInfo <- pData(phenoData(gseFile[[1]]))
rnaSeq <- gseInfo[grepl("RNA", gseInfo$title), c(1, 6, 8)]
rnaSeq[1:10,]
samples <- lapply(rnaSeq$title, FUN=function(x){unlist(strsplit(x,
split = " "))[2]})
newColNames <- c(colnames(myexp)[1:5], unlist(samples))
colnames(myexp) <- newColNames
#get the 2 and third token from the column names
samples <- data.frame(lapply(colnames(myexp)[6:92], FUN=function(x){unlist(strsplit(x,
split = "\\-"))[c(2,3)]}))
samples
colnames(samples) <- colnames(myexp)[6:92]
rownames(samples) <- c("individual","tissue_type")
samples <- data.frame(t(samples))
sum(grepl("N", samples$tissue_type))
# [1] 27
sum(grepl("T", samples$tissue_type))
# [1] 30
sum(grepl("M", samples$tissue_type))
# [1] 30
#translate out counts into counts per million using
#the edgeR package function cpm
cpms <- edgeR::cpm(myexp[,6:92])
rownames(cpms) <- myexp$Gene
# get rid of low counts
keep <- rowSums(cpms >1) >=3
myexp_filtered <- myexp[keep,]
dim(myexp_filtered)
dim(myexp)
summarized_gene_counts_filtered <- sort(table(myexp$Gene),
decreasing = TRUE)
kable(summarized_gene_counts_filtered[
which(summarized_gene_counts_filtered>1)[1:10]],
format="html")
data2plot <- log2(cpm(myexp_filtered[,6:92]))
boxplot(data2plot, xlab = "Samples", ylab = "log2 CPM",
las = 2, cex = 0.5, cex.lab = 0.5,
cex.axis = 0.5, main = "RNASeq Samples")
#draw the median on each box plot
abline(h = median(apply(data2plot, 2, median)),
col = "green", lwd = 0.6, lty = "dashed")
counts_density <- apply(log2(edgeR::cpm(myexp_filtered[,6:92])),
2, density)
#calculate the limits across all the samples
xlim <- 0; ylim <- 0
for (i in 1:length(counts_density)) {
xlim <- range(c(xlim, counts_density[[i]]$x));
ylim <- range(c(ylim, counts_density[[i]]$y))
}
cols <- rainbow(length(counts_density))
ltys <- rep(1, length(counts_density))
#plot the first density plot to initialize the plot
plot(counts_density[[1]], xlim=xlim, ylim=ylim, type="n",
ylab="Smoothing density of log2-CPM",
main="", cex.lab = 0.85)
#plot each line
for (i in 1:length(counts_density))
lines(counts_density[[i]], col=cols[i], lty=ltys[i])
#create legend
legend("topright", colnames(data2plot),
col=cols, lty=ltys, cex=0.75,
border ="blue",  text.col = "green4",
merge = TRUE, bg = "gray90")
edgeR::plotMA(log2(myexp[,c(6,7)]), ylab="M - ratio log expression",
main="C1-T1 vs C1-N1 example")
DESeq2::plotMA(log2(myexp[,c(6,7)]), ylab="M - ratio log expression",
main="C1-T1 vs C1-N1 example")
myexp[,c(6,7)]
log2(myexp[,c(6,7)])
myexp[,c(6,7)]
myexp[,c(6,7)]
log2(myexp[,c(6,7)])
DESeq2::plotMA(log2(myexp[,c(6,7)]), ylab="M - ratio log expression",
main="C1-T1 vs N1 example")
?DESeq2::plotMA
DESeq2::plotMA(log2(myexp[,c(6,7)]), ylab="M - ratio log expression",
main="C1-T1 vs N1 example")
log2(myexp[,c(6,7)])
logExp <- log2(myexp[,c(6,7)])
DESeq2::plotMA(logExp, ylab="M - ratio log expression",
main="C1-T1 vs N1 example")
DESeq2::plotMA(logExp,
main="C1-T1 vs N1 example")
DESeq2::plotMA(logExp)
DESeq2::plotMA(myexp[, c(6, 7)])
DESeq2::plotMA(myexp)
logExp <- log2(myexp[,c(6,7)])
logExp
DESeq2::plotMA(myexp)
DESeq2::plotMA(logExp, ylab="M - ratio log expression",
main="C1-T1 vs N1 example")
edgeR::plotMA(logExp, ylab="M - ratio log expression",
main="C1-T1 vs N1 example")
plotMA(log2(myexp[,c(6,7)]), ylab="M - ratio log expression",
main="C1-T1 vs N1 example")
plotMA
limma::plotMA
limma::plotMA(log2(myexp[,c(6,7)]), ylab="M - ratio log expression",
main="C1-T1 vs N1 example")
samples <- lapply(rnaSeq$title, FUN=function(x){unlist(strsplit(x,
split = " "))[2]})
samples
substr(samples,1,nchar(samples)-1)
samples <- substr(samples,1,nchar(samples)-1)
samples <- lapply(rnaSeq$title, FUN=function(x){unlist(strsplit(x,
split = " "))[2]})
samples <- lapply(rnaSeq$title, FUN=function(x){unlist(strsplit(x,
split = " "))[2]})
samples
sample_types <- substr(samples,1,nchar(samples)-1)
samples <- lapply(rnaSeq$title, FUN=function(x){unlist(strsplit(x,
split = " "))[2]})
samples
sample_types <- substr(samples,1,nchar(samples)-1)
sample_types
newColNames <- c(colnames(myexp)[1:5], sample_types)
colnames(myexp) <- newColNames
#get the 2 and third token from the column names
samples <- data.frame(lapply(colnames(myexp)[6:92], FUN=function(x){unlist(strsplit(x,
split = "\\-"))[c(2,3)]}))
samples
colnames(samples) <- colnames(myexp)[6:92]
rownames(samples) <- c("individual","tissue_type")
samples <- data.frame(t(samples))
samples
sum(grepl("N", samples$tissue_type))
# [1] 27
sum(grepl("T", samples$tissue_type))
# [1] 30
sum(grepl("M", samples$tissue_type))
#translate out counts into counts per million using
#the edgeR package function cpm
cpms <- edgeR::cpm(myexp[,6:92])
rownames(cpms) <- myexp$Gene
# get rid of low counts
keep <- rowSums(cpms >1) >=3
myexp_filtered <- myexp[keep,]
dim(myexp_filtered)
dim(myexp)
summarized_gene_counts_filtered <- sort(table(myexp$Gene),
decreasing = TRUE)
kable(summarized_gene_counts_filtered[
which(summarized_gene_counts_filtered>1)[1:10]],
format="html")
data2plot <- log2(cpm(myexp_filtered[,6:92]))
boxplot(data2plot, xlab = "Samples", ylab = "log2 CPM",
las = 2, cex = 0.5, cex.lab = 0.5,
cex.axis = 0.5, main = "RNASeq Samples")
#draw the median on each box plot
abline(h = median(apply(data2plot, 2, median)),
col = "green", lwd = 0.6, lty = "dashed")
counts_density <- apply(log2(edgeR::cpm(myexp_filtered[,6:92])),
2, density)
#calculate the limits across all the samples
xlim <- 0; ylim <- 0
for (i in 1:length(counts_density)) {
xlim <- range(c(xlim, counts_density[[i]]$x));
ylim <- range(c(ylim, counts_density[[i]]$y))
}
cols <- rainbow(length(counts_density))
ltys <- rep(1, length(counts_density))
#plot the first density plot to initialize the plot
plot(counts_density[[1]], xlim=xlim, ylim=ylim, type="n",
ylab="Smoothing density of log2-CPM",
main="", cex.lab = 0.85)
#plot each line
for (i in 1:length(counts_density))
lines(counts_density[[i]], col=cols[i], lty=ltys[i])
#create legend
legend("topright", colnames(data2plot),
col=cols, lty=ltys, cex=0.75,
border ="blue",  text.col = "green4",
merge = TRUE, bg = "gray90")
limma::plotMA(log2(myexp[,c(6,7)]), ylab="M - ratio log expression",
main="C1-T1 vs N1 example")
celltypes <-colnames(myexp)[6:92]
filtered_data_matrix <- as.matrix(myexp_filtered[,6:92])
rownames(filtered_data_matrix) <- myexp_filtered$Gene
d = edgeR::DGEList(counts=filtered_data_matrix, group=df$CellTypes)
filtered_data_matrix
samples
d <- edgeR::DGEList(counts = filtered_data_matrix, group = samples$tissue_type)
d
d <- calcNormFactors(d)
d
#get the normalized data
normalized_counts <- cpm(d)
normalized_counts
plotMDS(d, labels = tissue_types,
col = c("darkgreen", "blue")[factor(samples$tissue_types)])
plotMDS(d, labels = rownames(samples),
col = c("darkgreen", "blue")[factor(samples$tissue_types)])
factor(samples$tissue_types)
samples$tissue_types
plotMDS(d, labels = rownames(samples),
col = c("darkgreen", "blue")[factor(samples$tissue_type)])
fnames <- rownames(sfiles)
fnames
myexp <- read.delim(fnames[4],header=TRUE,
check.names = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")}
if (!requireNamespace("GEOmetadb", quietly = TRUE)){
BiocManager::install("GEOmetadb")}
if (!requireNamespace("edgeR", quietly = TRUE)){
BiocManager::install("edgeR")}
if (!requireNamespace("ggplot2", quietly = TRUE)){
install.packages("ggplot2")}
if (!requireNamespace("odbc", quietly = TRUE)){
install.packages("odbc")}
library("GEOmetadb")
library("ggplot2")
library("knitr")
library("RSQLite")
library("edgeR")
library("limma")
library("biomaRt")
library("GEOquery")
library("Biobase")
library("BiocGenerics")
library("odbc")
library("dplyr")
library("DBI")
# options(timeout = max(10000, getOption("timeout")))
#
# getWhatever <-
# function(destdir=getwd(),destfile='GEOmetadb.sqlite.gz',type='full') {
#   localfile <- file.path(destdir,destfile)
#   if(type == 'full') {
#       url_geo = "https://gbnci.cancer.gov/geo/GEOmetadb.sqlite.gz"
#   } else {
#       url_geo = "https://gbnci.cancer.gov/geo/GEOmetadb_demo.sqlite.gz"
#   }
#
#
#   download.file(url_geo, destfile=localfile,mode='wb')
#   cat('Unzipping...\n')
#   gunzip(localfile,overwrite=TRUE)
#   unzippedlocalfile <- gsub('[.]gz$','',localfile)
#   con <- dbConnect(SQLite(),unzippedlocalfile)
#   dat <- dbGetQuery(con,'select * from metaInfo')
#   dbDisconnect(con)
#   cat("Metadata associate with downloaded file:\n")
#   print(dat)
#   return(unzippedlocalfile)
# }
#
# if( !file.exists("GEOmetadb.sqlite") ) {
#     demo_sqlfile <- getWhatever()
# } else {
#     demo_sqlfile <- "GEOmetadb.sqlite"
# }
#
# file.info(demo_sqlfile)
# con <- dbConnect(SQLite(),'GEOmetadb.sqlite')
# geo_tables <- dbListTables(con)
# geo_tables
#
#
# dbListFields(con,'gse')
#
# results <- dbGetQuery(con,'select * from gpl limit 5')
# knitr::kable(head(results[,1:5]), format = "html")
# num_platforms <- dbGetQuery(con,'select count(*) from gpl')
# num_platforms
#
# dbListFields(con,'gpl')
#
# uniq_tech <- dbGetQuery(con,'select distinct technology from gpl')
# nrow(uniq_tech)
#
# knitr::kable(uniq_tech[1:2,], format = "html")
#
# #create table with two columns so that all data fit on the slide
# mod_table <- cbind(uniq_tech[1:(nrow(uniq_tech)/2),1],
#        uniq_tech[((nrow(uniq_tech)/2)+1):nrow(uniq_tech),1])
# knitr::kable( mod_table, format = "html")
#
# num_uniq_tech <- dbGetQuery(con,'select technology,count(*) from gpl group by technology')
# colnames(num_uniq_tech)[2] <- "Num_Platforms"
# num_uniq_tech
#
# plot_df <- num_uniq_tech[!is.na(num_uniq_tech$technology),]
# p <- ggplot(data = plot_df, aes(technology, Num_Platforms)) + geom_col() + coord_flip()
# p
# sql <- paste("SELECT DISTINCT gse.title,gse.gse, gpl.title,",
#              " gse.submission_date,",
#              " gse.supplementary_file",
#              "FROM",
#              "  gse JOIN gse_gpl ON gse_gpl.gse=gse.gse",
#              "  JOIN gpl ON gse_gpl.gpl=gpl.gpl",
#              "WHERE",
#              "  gse.submission_date > '2020-01-01' AND",
#              "  gse.title LIKE '%cancer%' AND",
#              "  gpl.organism LIKE '%Homo sapiens%' AND",
#              "  gpl.technology LIKE '%high-throughput sequencing%' ",
#              "  ORDER BY gse.submission_date DESC",sep=" ")
#
# rs <- dbGetQuery(con,sql)
# # break the file names up and just get the actual file name
# unlist(lapply(rs$supplementary_file,
# FUN = function(x){x <- unlist(strsplit(x,";")) ;
#               x <- x[grep(x,pattern="txt",ignore.case = TRUE)];
#                 tail(unlist(strsplit(x,"/")),n=1)}))[1:10]
# counts_files <- rs$supplementary_file[grep(rs$supplementary_file,
#                               pattern = "count|cnt",ignore.case = TRUE)]
#
# series_of_interest <- rs$gse[grep(rs$supplementary_file,
#                               pattern = "count|cnt",ignore.case = TRUE)]
#
# shortened_filenames <- unlist(lapply(counts_files,
#               FUN = function(x){x <- unlist(strsplit(x,";")) ;
#               x <- x[grep(x,pattern= "count|cnt",ignore.case = TRUE)];
#                 tail(unlist(strsplit(x,"/")),n=1)}))
# shortened_filenames
# num_series <- dbGetQuery(con,
#                          paste("select * from gsm where series_id in ('",
#                                paste(series_of_interest,collapse="','"),
#                                "')", collapse = ""))
# gse.count <- as.data.frame(table(num_series$series_id))
# series_of_interest_with_counts <- gse.count[which(gse.count$Freq>6),1]
# M <- gse.count[which(gse.count$Freq>6),]
# M[order(M[, 2], decreasing = TRUE),]
# sfiles = getGEOSuppFiles('GSE162515')
# fnames = rownames(sfiles) # There are four supplement files
# b2 = read.delim(fnames[1],header=TRUE)
# head(b2)
gse <- getGEO("GSE162515",GSEMatrix=FALSE)
kable(data.frame(head(Meta(gse))), format = "html")
current_gpl <- names(GPLList(gse))[1]
current_gpl_info <- Meta(getGEO(current_gpl))
current_gpl_info$title
# [1] "Illumina NovaSeq 6000 (Homo sapiens)"
current_gpl_info$last_update_date
# [1] "Nov 05 2018"
current_gpl_info$organism
# [1] "Homo sapiens"
sfiles <- getGEOSuppFiles('GSE162515')
fnames <- rownames(sfiles)
myexp <- read.delim(fnames[4],header=TRUE,
check.names = FALSE)
expInfos <- myexp[, seq(88, 92)]
newexp <- cbind(expInfos, myexp[, seq(-88, -92)])
myexp <- newexp
kable(myexp[1:15,1:15], format = "html")
dim(myexp)
summarized_gene_counts <- sort(table(myexp$Gene),
decreasing = TRUE)
kable(summarized_gene_counts[which(summarized_gene_counts>1)[1:10]], format = 'html')
colnames(myexp)
gseFile <- getGEO('GSE162515',GSEMatrix=TRUE)
gseInfo <- pData(phenoData(gseFile[[1]]))
rnaSeq <- gseInfo[grepl("RNA", gseInfo$title), c(1, 6, 8)]
rnaSeq[1:10,]
samples <- lapply(rnaSeq$title, FUN=function(x){unlist(strsplit(x,
split = " "))[2]})
sample_types <- substr(samples,1,nchar(samples)-1)
newColNames <- c(colnames(myexp)[1:5], sample_types)
colnames(myexp) <- newColNames
#get the 2 and third token from the column names
samples <- data.frame(lapply(colnames(myexp)[6:92], FUN=function(x){unlist(strsplit(x,
split = "\\-"))[c(2,3)]}))
colnames(samples) <- colnames(myexp)[6:92]
rownames(samples) <- c("individual","tissue_type")
samples <- data.frame(t(samples))
sum(grepl("N", samples$tissue_type))
# [1] 27
sum(grepl("T", samples$tissue_type))
# [1] 30
sum(grepl("M", samples$tissue_type))
# [1] 30
#translate out counts into counts per million using
#the edgeR package function cpm
cpms <- edgeR::cpm(myexp[,6:92])
rownames(cpms) <- myexp$Gene
# get rid of low counts
keep <- rowSums(cpms >1) >=3
myexp_filtered <- myexp[keep,]
dim(myexp_filtered)
dim(myexp)
summarized_gene_counts_filtered <- sort(table(myexp$Gene),
decreasing = TRUE)
kable(summarized_gene_counts_filtered[
which(summarized_gene_counts_filtered>1)[1:10]],
format="html")
data2plot <- log2(cpm(myexp_filtered[,6:92]))
boxplot(data2plot, xlab = "Samples", ylab = "log2 CPM",
las = 2, cex = 0.5, cex.lab = 0.5,
cex.axis = 0.5, main = "RNASeq Samples")
#draw the median on each box plot
abline(h = median(apply(data2plot, 2, median)),
col = "green", lwd = 0.6, lty = "dashed")
counts_density <- apply(log2(edgeR::cpm(myexp_filtered[,6:92])),
2, density)
#calculate the limits across all the samples
xlim <- 0; ylim <- 0
for (i in 1:length(counts_density)) {
xlim <- range(c(xlim, counts_density[[i]]$x));
ylim <- range(c(ylim, counts_density[[i]]$y))
}
cols <- rainbow(length(counts_density))
ltys <- rep(1, length(counts_density))
#plot the first density plot to initialize the plot
plot(counts_density[[1]], xlim=xlim, ylim=ylim, type="n",
ylab="Smoothing density of log2-CPM",
main="", cex.lab = 0.85)
#plot each line
for (i in 1:length(counts_density))
lines(counts_density[[i]], col=cols[i], lty=ltys[i])
#create legend
legend("topright", colnames(data2plot),
col=cols, lty=ltys, cex=0.75,
border ="blue",  text.col = "green4",
merge = TRUE, bg = "gray90")
limma::plotMA(log2(myexp[,c(6,7)]), ylab="M - ratio log expression",
main="C1-T1 vs N1 example")
celltypes <-colnames(myexp)[6:92]
filtered_data_matrix <- as.matrix(myexp_filtered[, 6:92])
rownames(filtered_data_matrix) <- myexp_filtered$Gene
d <- edgeR::DGEList(counts = filtered_data_matrix, group = samples$tissue_type)
d <- calcNormFactors(d)
#get the normalized data
normalized_counts <- cpm(d)
current_gpl <- names(GPLList(gse))[1]
current_gpl_info <- Meta(getGEO(current_gpl))
current_gpl_info$title
current_gpl_info$last_update_date
current_gpl_info$organism
sfiles <- getGEOSuppFiles('GSE162515')
fnames <- rownames(sfiles)
fnames <- rownames(sfiles)
myexp <- read.delim(fnames[4],header=TRUE,
check.names = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")}
if (!requireNamespace("GEOmetadb", quietly = TRUE)){
BiocManager::install("GEOmetadb")}
if (!requireNamespace("edgeR", quietly = TRUE)){
BiocManager::install("edgeR")}
if (!requireNamespace("ggplot2", quietly = TRUE)){
install.packages("ggplot2")}
if (!requireNamespace("odbc", quietly = TRUE)){
install.packages("odbc")}
library("GEOmetadb")
library("ggplot2")
library("knitr")
library("RSQLite")
library("edgeR")
library("limma")
library("biomaRt")
library("GEOquery")
library("Biobase")
library("BiocGenerics")
library("odbc")
library("dplyr")
library("DBI")
gse <- getGEO("GSE162515",GSEMatrix=FALSE)
kable(data.frame(head(Meta(gse))), format = "html")
current_gpl <- names(GPLList(gse))[1]
current_gpl_info <- Meta(getGEO(current_gpl))
current_gpl_info$title
current_gpl_info$last_update_date
current_gpl_info$organism
setwd("~/St.George/2023Winter/BCB420/ChengYue_Zhang/A3")
